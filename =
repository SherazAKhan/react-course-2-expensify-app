"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// console.log("App.js is Running!");

// //JSX - JavaScript XML - An extention to JS Code
// let siteHeader = {
//   title: "Indicision App",
//   //subtitle: "First App in JSX",
//   options: ["One", " Two"],
// };
// //A variable is declared to hold HTML Element i.e. <p> in this case</p>
// // let template = (
// //   <div>
// //     <h1>{siteHeader.title}</h1>
// //     {siteHeader.subtitle && <p>{siteHeader.subtitle}</p>}
// //     {siteHeader.options.length > 1 ? (
// //       <p>"Here are your options: " {siteHeader.options}</p>
// //     ) : (
// //       "No Options"
// //     )}
// //     <ol>
// //       <li>Item One</li>
// //       <li>Item Two</li>
// //     </ol>
// //   </div>
// // );
// //////////////////////////////////////////////////////////////////////////////////////
// //Using Variable to store Data and then use JSX Expressions to display
// //Useful in case to display Dynamic Data coming from User or from any other Source
// // var uName = "Khan";
// // var uAge = 44;
// // var uLocation = "Jhang, Punjab, Pakistan";

// //var template2 = (
// //   <div>
// //     <h1>{uName}</h1>
// //     <p>Age: {uAge}</p>
// //     <p>Location: {uLocation}</p>
// //   </div>
// // );

// ////////////////////////////////////////////////////////////////////////////////////
// //Data can be stored in Objects too
// // var userInfo = {
// //   name: "Khan",
// //   age: 45,
// //   location: "Jhang",
// // };
// // function getLocation(location) {
// //   if (location) return <p>Location: {location}</p>;
// // }
// // var template2 = (
// //   <div>
// //     {/* //Ternary Operator - If (logic) ? 'Statement (s) if condition is true :
// //     //'Statement (s) if condition is false*/}
// //     <h1>{userInfo.name ? userInfo.name : "Anonymous"}</h1>
// //     {userInfo.age && userInfo.age >= 18 && <p>Age: {userInfo.age}</p>}
// //     {/* <p>Location: {getLocation(userInfo.location)}</p> */}
// //     {getLocation(userInfo.location)}
// //   </div>
// // );

// /////////////////////////////////////////////////////////////////////////////////////

// //Events and Attributes
// let count = 0;
// const addOne = () => {
//   count++;
//   renderCountApp();
// };
// const minusOne = () => {
//   count--;
//   renderCountApp();
// };
// const reset = () => {
//   count = 0;
//   renderCountApp();
// };
// //const someId = "myidHere";

// //Retrieving ID of div where we want to display this paragraph
// const appRoot = document.getElementById("app");

// //Displaying it in Browser
// //ReactDOM.render(template, appRoot);
// //ReactDOM.render(templateTwo, appRoot);

// //Rendering (Manual)
// const renderCountApp = () => {
//   const templateTwo = (
//     <div>
//       <h1>Count: {count}</h1>
//       {/*Class Attribute of HTML is renamed here with className in JSX
//       Similarly id attribute could be variable like instead of <button id="my-id" className="button">
//       we can write <button id={someId} className="button">
//       <button id={someId} className="button">+1</button>*/}
//       <button onClick={addOne}>+1</button>

//       {/*Challenge -1 and Reset Buttons */}
//       <button onClick={minusOne}>-1</button>
//       <button onClick={reset}>Reset</button>
//     </div>
//   );
//   ReactDOM.render(templateTwo, appRoot);
// };
// renderCountApp();

///////////////////////////////////// React Components using Classes ///////////////////////////////////////////
var Header = function (_React$Component) {
  _inherits(Header, _React$Component);

  function Header() {
    _classCallCheck(this, Header);

    return _possibleConstructorReturn(this, (Header.__proto__ || Object.getPrototypeOf(Header)).apply(this, arguments));
  }

  _createClass(Header, [{
    key: "render",
    value: function render() {
      return React.createElement(
        "div",
        null,
        React.createElement(
          "h1",
          null,
          "Indecision"
        ),
        React.createElement(
          "h2",
          null,
          "Put your life in the hands of a computer."
        )
      );
    }
  }]);

  return Header;
}(React.Component);

var Action = function (_React$Component2) {
  _inherits(Action, _React$Component2);

  function Action() {
    _classCallCheck(this, Action);

    return _possibleConstructorReturn(this, (Action.__proto__ || Object.getPrototypeOf(Action)).apply(this, arguments));
  }

  _createClass(Action, [{
    key: "render",
    value: function render() {
      return React.createElement(
        "div",
        null,
        React.createElement(
          "button",
          null,
          "What should i do? "
        ),
        ";"
      );
    }
  }]);

  return Action;
}(React.Component);

var jsx = function jsx() {
  React.createElement(
    "div",
    null,
    React.createElement(Header, null),
    React.createElement(Action, null)
  );
};

ReactDOM.render(jsx, document.getElementById("app"));
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;var desc = Object.getOwnPropertyDescriptor(object, property);if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;if (getter === undefined) {
      return undefined;
    }return getter.call(receiver);
  }
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var Person = function () {
  function Person() {
    var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "Anonymous";
    var age = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    _classCallCheck(this, Person);

    this.name = name, this.age = age;
  }

  _createClass(Person, [{
    key: "getGreeting",
    value: function getGreeting() {
      //String Template Usage
      return "Hi! I am " + this.name + " and my age is " + this.age;
    }
  }, {
    key: "getDescription",
    value: function getDescription() {
      return this.name + " is " + this.age + " years old";
    }
  }]);

  return Person;
}();

var Student = function (_Person) {
  _inherits(Student, _Person);

  function Student(name, age, major) {
    _classCallCheck(this, Student);

    var _this = _possibleConstructorReturn(this, (Student.__proto__ || Object.getPrototypeOf(Student)).call(this, name, age));
    //Calling construct of parent class and passing arguments to it


    _this.major = major;
    return _this;
  }

  _createClass(Student, [{
    key: "hasMajor",
    value: function hasMajor() {
      //Returns T/F in case a student has Major or Not
      return !!this.hasMajor;
    }
    //Overriding Parent Class Function

  }, {
    key: "getDescription",
    value: function getDescription() {
      var desc = _get(Student.prototype.__proto__ || Object.getPrototypeOf(Student.prototype), "getDescription", this).call(this);
      return desc + " and having " + this.major + " as a Major Subject";
    }
  }]);

  return Student;
}(Person);

var me = new Student("Khan", 45, "Computer Science");
console.log(me.getDescription());

var friend = new Student();
console.log(friend.getDescription());
